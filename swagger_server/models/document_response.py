# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class DocumentResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, document_id=None, document_path=None, type=None, extracted_text=None):  # noqa: E501
        """DocumentResponse - a model defined in Swagger

        :param document_id: The document_id of this DocumentResponse.  # noqa: E501
        :type document_id: str
        :param document_path: The document_path of this DocumentResponse.  # noqa: E501
        :type document_path: int
        :param type: The type of this DocumentResponse.  # noqa: E501
        :type type: str
        :param extracted_text: The extracted_text of this DocumentResponse.  # noqa: E501
        :type extracted_text: str
        """
        self.swagger_types = {
            'document_id': str,
            'document_path': int,
            'type': str,
            'extracted_text': str
        }

        self.attribute_map = {
            'document_id': 'documentID',
            'document_path': 'documentPath',
            'type': 'type',
            'extracted_text': 'extractedText'
        }

        self._document_id = document_id
        self._document_path = document_path
        self._type = type
        self._extracted_text = extracted_text

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The documentResponse of this DocumentResponse.  # noqa: E501
        :rtype: DocumentResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_id(self):
        """Gets the document_id of this DocumentResponse.


        :return: The document_id of this DocumentResponse.
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this DocumentResponse.


        :param document_id: The document_id of this DocumentResponse.
        :type document_id: str
        """

        self._document_id = document_id

    @property
    def document_path(self):
        """Gets the document_path of this DocumentResponse.


        :return: The document_path of this DocumentResponse.
        :rtype: int
        """
        return self._document_path

    @document_path.setter
    def document_path(self, document_path):
        """Sets the document_path of this DocumentResponse.


        :param document_path: The document_path of this DocumentResponse.
        :type document_path: int
        """

        self._document_path = document_path

    @property
    def type(self):
        """Gets the type of this DocumentResponse.


        :return: The type of this DocumentResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DocumentResponse.


        :param type: The type of this DocumentResponse.
        :type type: str
        """
        allowed_values = ["jpeg", "png", "pdf"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def extracted_text(self):
        """Gets the extracted_text of this DocumentResponse.


        :return: The extracted_text of this DocumentResponse.
        :rtype: str
        """
        return self._extracted_text

    @extracted_text.setter
    def extracted_text(self, extracted_text):
        """Sets the extracted_text of this DocumentResponse.


        :param extracted_text: The extracted_text of this DocumentResponse.
        :type extracted_text: str
        """

        self._extracted_text = extracted_text
